cc_library {
    name: "libz",

    host_supported: true,
    unique_host_soname: true,
    static_ndk_lib: true,

    vendor_available: true,
    vndk: {
        enabled: true,
        support_system_process: true,
    },

    cflags: [
        "-O3",
        "-DHAVE_HIDDEN",
        "-DZLIB_CONST",
        "-DUNALIGNED_OK",
        "-Wall",
        "-Werror",
        "-Wno-unused",
        "-Wno-unused-parameter",
        "-Wno-error=attributes",
        "-Wno-attributes",
    ],
    stl: "none",
    export_include_dirs: ["."],
    srcs: [
        "adler32.c",
        "compress.c",
        "crc32.c",
        "deflate.c",
        "gzclose.c",
        "gzlib.c",
        "gzread.c",
        "gzwrite.c",
        "infback.c",
        "inflate.c",
        "inftrees.c",
        "inffast.c",
        "trees.c",
        "uncompr.c",
        "zutil.c",

        "simd_stub.c",
    ],

    arch: {
        arm: {
            // measurements show that the ARM version of ZLib is about x1.17 faster
            // than the thumb one...
            // TODO: re-test with zlib_bench after SIMD is enabled.
            instruction_set: "arm",

            // TODO: This is to work around b/24465209. Remove after root cause
            // is fixed.
            pack_relocations: false,
            ldflags: ["-Wl,--hash-style=both"],

            cflags: [
                "-DARMV8_OS_LINUX",
                "-DADLER32_SIMD_NEON",
                "-DCRC32_ARMV8_CRC32",
                "-DINFLATE_CHUNK_SIMD_NEON",
            ],

            export_include_dirs: [
                "contrib/optimizations/",
            ],

            srcs: [
                "arm_features.c",
                "adler32_simd.c",
                "crc32_simd.c",
                "contrib/optimizations/inffast_chunk.c",
                "contrib/optimizations/inflate.c",
            ],
            exclude_srcs: [
                "inflate.c",
            ],
        },
        arm64: {
            cflags: [
                "-DARMV8_OS_LINUX",
                "-DADLER32_SIMD_NEON",
                "-DCRC32_ARMV8_CRC32",
                "-DINFLATE_CHUNK_SIMD_NEON",
                "-DINFLATE_CHUNK_READ_64LE",
            ],

            export_include_dirs: [
                "contrib/optimizations/",
            ],

            srcs: [
                "arm_features.c",
                "adler32_simd.c",
                "crc32_simd.c",
                "contrib/optimizations/inffast_chunk.c",
                "contrib/optimizations/inflate.c",
            ],
            exclude_srcs: [
                "inflate.c",
            ],
        },
    },

    target: {
        linux_bionic: {
            enabled: true,
        },
        windows: {
            enabled: true,
        },
    },
}

cc_binary_host {
    name: "minigzip",
    srcs: ["contrib/minigzip/minigzip.c"],
    cflags: [
        "-Wall",
        "-Werror",
        "-DUSE_MMAP",
    ],
    static_libs: ["libz"],
    stl: "none",
}

cc_binary {
    name: "zlib_bench",
    srcs: ["contrib/bench/zlib_bench.cc"],
    cflags: [
        "-Wall",
        "-Werror",
    ],
    host_supported: true,
    shared_libs: ["libz"],
}

// This module is defined in development/ndk/Android.bp. Updating these headers
// to be usable for any API level is going to be some work (at the very least,
// there's a ZLIB_VERNUM that will need to be handled since early versions of
// Android did not have all the APIs that calling code will use if this is set
// to the current value.
//
// The NDK never updated the zlib headers when the platform updated, so until we
// solve this the NDK will continue shipping the old headers.
//
// ndk_headers {
//     name: "libz_headers",
//     from: "src",
//     to: "",
//     srcs: [
//         "src/zconf.h",
//         "src/zlib.h",
//     ],
//     license: "NOTICE",
// }

ndk_library {
    name: "libz",
    symbol_file: "libz.map.txt",
    first_version: "9",
    unversioned_until: "current",
}
